{ host, config, pkgs, ... }:

# Import keybinds and window rules
let
  keybindsModule = import ./keybinds.nix { inherit host; };
  windowrulesModule = import ./windowrules.nix { inherit host; };
  layoutModule = import ./layout.nix { };
  startupModule = import ./startup.nix { inherit host; };

  # Try to import host-specific outputs, fallback to empty if doesn't exist
  hostOutputsPath = ./hosts/${host}/outputs.nix;
  hostOutputs = if builtins.pathExists hostOutputsPath then
    import hostOutputsPath { inherit host; }
  else
    "";

  # Try to import host-specific keybinds, fallback to empty if doesn't exist
  hostKeybindsPath = ./hosts/${host}/keybinds.nix;
  hostKeybinds = if builtins.pathExists hostKeybindsPath then
    import hostKeybindsPath { inherit host; }
  else
    "";

  # Try to import host-specific window rules, fallback to empty if doesn't exist
  hostWindowRulesPath = ./hosts/${host}/windowrules.nix;
  hostWindowRules = if builtins.pathExists hostWindowRulesPath then
    import hostWindowRulesPath { inherit host; }
  else
    "";

in {
  # Install Niri and related packages
  home.packages = with pkgs; [ udiskie xwayland-satellite swww ];

  # Generate Niri config.kdl
  xdg.configFile."niri/config.kdl".text = ''
    // Niri Configuration for ${host}
    // Generated by NixOS configuration

    ${layoutModule}

    ${hostOutputs}

    ${keybindsModule}

    ${hostKeybinds}

    ${windowrulesModule}

    ${hostWindowRules}

    ${startupModule}

    cursor {
      xcursor-theme "Bibata-Modern-Ice"
      xcursor-size 24
      hide-when-typing
      hide-after-inactive-ms 5000
    }

    environment {
      XDG_CURRENT_DESKTOP "niri"
      MOZ_ENABLE_WAYLAND "1"
      QT_QPA_PLATFORM "wayland"
      ELECTRON_OZONE_PLATFORM_HINT "wayland"
      QT_QPA_PLATFORMTHEME "gtk3"
      QT_QPA_PLATFORMTHEME_QT6 "gtk3"
      TERMINAL "kitty"
      XCURSOR_THEME "Bibata-Modern-Ice"
      XCURSOR_SIZE "24"
    }

    hotkey-overlay {
        skip-at-startup
    }

    prefer-no-csd

    screenshot-path "~/Pictures/Screenshots/Screenshot from %Y-%m-%d %H-%M-%S.png"
  '';

  systemd.user.services.xwayland-satellite = {
    Unit = {
      Description = "Xwayland outside Wayland";
      BindsTo = "graphical-session.target";
      After = "graphical-session.target";
    };
    Service = {
      Type = "notify";
      NotifyAccess = "all";
      ExecStart = "${pkgs.xwayland-satellite}/bin/xwayland-satellite";
      StandardOutput = "journal";
      Restart = "on-failure";
    };
    Install.WantedBy = [ "graphical-session.target" ];
  };
}
