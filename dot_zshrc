# Enable zprof profiling to measure startup time
# zmodload zsh/zprof

# Set the directory we want to store zinit and plugins
ZINIT_HOME="${XDG_DATA_HOME:-${HOME}/.local/share}/zinit/zinit.git"

# Download Zinit, if it's not there yet
if [ ! -d "$ZINIT_HOME" ]; then
   mkdir -p "$(dirname $ZINIT_HOME)"
   git clone https://github.com/zdharma-continuum/zinit.git "$ZINIT_HOME"
fi

# Source/Load zinit
source "${ZINIT_HOME}/zinit.zsh"

# Add in zsh plugins
zinit light-mode for zdharma-continuum/zinit-annex-bin-gem-node
zinit pack for pyenv
zi ice from"gh-r" as"program"
zi light junegunn/fzf
zinit light Aloxaf/fzf-tab
zinit light jeffreytse/zsh-vi-mode

zinit wait lucid for \
 atinit"ZINIT[COMPINIT_OPTS]=-C; zicompinit; zicdreplay" \
    zdharma-continuum/fast-syntax-highlighting \
 blockf \
    zsh-users/zsh-completions \
 atload"!_zsh_autosuggest_start" \
    zsh-users/zsh-autosuggestions

# Add in snippets
zinit snippet OMZP::sudo
zinit snippet OMZP::archlinux
zinit snippet OMZP::aws
zinit snippet OMZP::kubectl
zinit snippet OMZP::kubectx
zinit snippet OMZP::command-not-found

# Load completions (only call compinit once, after plugins)
autoload -Uz compinit && compinit -C  # Use -C to speed up by using cache

zinit cdreplay -q

# History
HISTSIZE=5000
HISTFILE=~/.zsh_history
SAVEHIST=$HISTSIZE
HISTDUP=erase
setopt appendhistory
setopt sharehistory
setopt hist_ignore_space
setopt hist_ignore_all_dups
setopt hist_save_no_dups
setopt hist_ignore_dups
setopt hist_find_no_dups

# Completion styling
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Za-z}'
zstyle ':completion:*' list-colors "${(s.:.)LS_COLORS}"
zstyle ':completion:*' menu no
zstyle ':fzf-tab:complete:cd:*' fzf-preview 'ls --color $realpath'
zstyle ':fzf-tab:complete:__zoxide_z:*' fzf-preview 'ls --color $realpath'

# Keybindings
zinit ice depth=1

TMUX_DIR="~/.config/tmux"
if [[ "$TERM_PROGRAM" != "vscode" ]]; then
  if [ -z "$TMUX" ]; then
    if tmux has-session 2>/dev/null; then
      # Attach to provided session name if given, otherwise first available
      if [ -n "$1" ]; then
        tmux attach -t "$1"
      else
        tmux attach
      fi
    else
      # No sessions exist, create a new one
      tmux new
    fi
  fi
fi

# Enable command auto-correction.
ENABLE_CORRECTION="true"

# Display red dots whilst waiting for completion.
COMPLETION_WAITING_DOTS="true"

# Import private exports that shouldn't be committed
PRIVEXPORTFILE=~/.zshrcpriv
source $PRIVEXPORTFILE

. "$HOME/.atuin/bin/env"

# Shell integrations
eval "$(zoxide init zsh)"
eval "$(atuin init zsh)"
eval "$(~/.local/bin/mise activate zsh)"
# Use oh-my-posh
# eval "$(oh-my-posh init zsh --config ~/.config/oh-my-posh/negligible-custom.omp.toml)"
eval "$(starship init zsh)"
if command -v pyenv 1>/dev/null 2>&1; then
  eval "$(pyenv init - --path --no-rehash zsh)"
fi

# zsh-vi-mode
ZVM_VI_ESCAPE_BINDKEY=jk
ZVM_VI_INSERT_ESCAPE_BINDKEY=$ZVM_VI_ESCAPE_BINDKEY
ZVM_VI_VISUAL_ESCAPE_BINDKEY=$ZVM_VI_ESCAPE_BINDKEY
ZVM_VI_OPPEND_ESCAPE_BINDKEY=$ZVM_VI_ESCAPE_BINDKEY

function zvm_after_lazy_keybindings() {
  # Remap to go to the beginning of the line
  zvm_bindkey vicmd 'gh' beginning-of-line
  # Remap to go to the end of the line
  zvm_bindkey vicmd 'gl' end-of-line
}

# Aliases
# alias cat=bat
alias cl='clear'
alias config="/usr/bin/git --git-dir=$HOME/.cfg/ --work-tree=$HOME"
alias gdate="date"
alias delete-merged-local-branches='git checkout develop && git pull && git branch --merged | grep -Ev "(^\*|production|staging|edge|develop|main|master)" | xargs git branch -d'
# This is specific to WSL 2. If the WSL 2 VM goes rogue and decides not to free
# up memory, this command will free your memory after about 20-30 seconds.
#   Details: https://github.com/microsoft/WSL/issues/4166#issuecomment-628493643
alias drop_cache="sudo sh -c \"echo 3 >'/proc/sys/vm/drop_caches' && swapoff -a && swapon -a && printf '\n%s\n' 'Ram-cache and Swap Cleared'\""
alias etmux="nvim ~/.config/tmux/tmux.conf"
alias evim="cd ~/.config/nvim && nvim ~/.config/nvim/init.lua"
alias ezsh="nvim ~/.zshrc"
alias installpacker="git clone https://github.com/wbthomason/packer.nvim\
 ~/.local/share/nvim/site/pack/packer/start/packer.nvim"
alias kittyupdate='curl -L https://sw.kovidgoyal.net/kitty/installer.sh | sh /dev/stdin'
alias la=tree
alias lzd="lazydocker"
alias lzg="lazygit"
alias lzj="lazyjournal"
alias listlargesthomefiles="du -h /home/drache | sort -rh | head -5"
alias listlogfilesize="du -h /home/drache/.cache/nvim | sort -rh | head -5"
alias ls='ls --color'
alias oc="opencode"
alias removenvimlog="rm /home/drache/.cache/nvim/log"
alias sudonvim='sudo env "PATH=$PATH" nvim'
alias synctime="sudo hwclock -s"
alias vim="nvim"
# . "$HOME/.cargo/env"

# Git
alias dc="chezmoi add"
alias dapply="chezmoi apply"
alias ddiff="chezmoi diff"
alias dot="chezmoi"
alias gc="git commit -m"
alias gca="git commit -a -m"
alias gp="git push origin HEAD"
alias gpu="git pull origin"
alias gst="git status"
alias glog="git log --graph --topo-order --pretty='%w(100,0,6)%C(yellow)%h%C(bold)%C(black)%d %C(cyan)%ar %C(green)%an%n%C(bold)%C(white)%s %N' --abbrev-commit"
alias gdiff="git diff"
alias gco="git checkout"
alias gcf="git checkout -b"
alias gb='git branch'
alias gba='git branch -a'
alias gadd='git add'
alias ga='git add -p'

# Docker
alias dco="docker compose"
alias dps="docker ps"
alias dpa="docker ps -a"
alias dl="docker ps -l -q"
alias dx="docker exec -it"
alias docker-remove-dangling-images='docker rmi $(docker images -f "dangling=true" -q)'
alias docker-remove-stopped-containers='docker rm -v $(docker ps -a -q -f status=exited)'
alias docker-stop-all-containers='docker stop $(docker ps -q)'

# Dirs
alias ..="cd .."
alias ...="cd ../.."
alias ....="cd ../../.."
alias .....="cd ../../../.."
alias ......="cd ../../../../.."

# Eza (better `ls`)
# ------------------------------------------------------------------------------
if type eza &>/dev/null; then
  alias l="eza --icons=always"
  alias ls="eza --icons=always"
  alias ll="eza -lg --icons=always"
  alias la="eza -lag --icons=always"
  alias lt="eza -lTg --icons=always"
  alias lt2="eza -lTg --level=2 --icons=always"
  alias lt3="eza -lTg --level=3 --icons=always"
  alias lta="eza -lTag --icons=always"
  alias lta2="eza -lTag --level=2 --icons=always"
  alias lta3="eza -lTag --level=3 --icons=always"
else
  echo ERROR: eza could not be found. Skip setting up eza aliases.
fi

# K8S
alias k="kubectl"
alias ka="kubectl apply -f"
alias kg="kubectl get"
alias kd="kubectl describe"
alias kdel="kubectl delete"
alias kl="kubectl logs"
alias kgpo="kubectl get pod"
alias kgd="kubectl get deployments"
alias kx="kubectx"
alias kns="kubens"
alias kl="kubectl logs -f"
alias ke="kubectl exec -it"
alias kcns='kubectl config set-context --current --namespace'
alias kcunset="kubectl config unset current-context"
alias podname=''
alias spac="sudo pacman"

# Lazy-load gvm
gvm_lazy_init() {
  # Remove this function and the alias
  unalias gvm 2>/dev/null
  unfunction gvm_lazy_init 2>/dev/null
  source "$HOME/.gvm/scripts/gvm"
  gvm "$@"
}

alias gvm=gvm_lazy_init

# Print zprof profiling results at the end
# zprof
